/**
 * Sistema de gestión de base de datos para TricycleCRM
 * 
 * Este módulo proporciona funciones para administrar la estructura de la base de datos
 * de Supabase, incluyendo migraciones, actualizaciones y sincronización automática.
 */

import { createClient } from '@supabase/supabase-js';
import { supabase, getSupabaseClient } from '../supabase';

// Interfaces de gestión de base de datos
export interface TableColumn {
  type: string;
  primaryKey?: boolean;
  autoIncrement?: boolean;
  notNull?: boolean;
  references?: string;
  default?: string;
}

export interface TableDefinition {
  columns: Record<string, TableColumn>;
  indexes?: string[];
}

export interface DatabaseSchema {
  tables: Record<string, TableDefinition>;
}

export interface MigrationResult {
  name: string;
  sql: string;
  timestamp: string;
}

export interface SchemaChangeResult {
  success: boolean;
  message: string;
  sql?: string;
  needsExecution?: boolean;
}

// Clase principal para la gestión de la base de datos
export class DatabaseManager {
  private static instance: DatabaseManager;
  private adminClient: any = null;
  
  // Singleton para asegurar una sola instancia
  public static getInstance(): DatabaseManager {
    if (!DatabaseManager.instance) {
      DatabaseManager.instance = new DatabaseManager();
    }
    return DatabaseManager.instance;
  }
  
  /**
   * Inicializa el cliente de administración de Supabase
   * @param supabaseUrl URL de Supabase
   * @param serviceRoleKey Clave de servicio (service_role)
   */
  public initAdminClient(supabaseUrl: string, serviceRoleKey: string): void {
    this.adminClient = createClient(supabaseUrl, serviceRoleKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    });
  }
  
  /**
   * Verifica si existe una tabla en la base de datos
   * @param tableName Nombre de la tabla a verificar
   * @returns Promise que resuelve a true si la tabla existe
   */
  public async tableExists(tableName: string): Promise<boolean> {
    try {
      // Intentar primero con cliente normal
      const { data, error } = await supabase.rpc('table_exists', { 
        table_name: tableName 
      });
      
      if (error) throw error;
      
      return !!data;
    } catch (error) {
      console.error(`Error al verificar si existe la tabla ${tableName}:`, error);
      return false;
    }
  }
  
  /**
   * Genera un script SQL para crear una tabla
   * @param tableName Nombre de la tabla
   * @param definition Definición de la tabla
   * @returns Script SQL para crear la tabla
   */
  public generateCreateTableSQL(tableName: string, definition: TableDefinition): string {
    // Implementación simplificada - en producción usaría el módulo MDC
    let sql = `CREATE TABLE IF NOT EXISTS public.${tableName} (\n`;
    
    // Añadir columnas
    const columns = Object.entries(definition.columns).map(([columnName, columnDef]) => {
      let columnSQL = `  ${columnName} ${columnDef.type}`;
      
      if (columnDef.primaryKey) columnSQL += ' PRIMARY KEY';
      if (columnDef.autoIncrement) columnSQL += ' GENERATED BY DEFAULT AS IDENTITY';
      if (columnDef.notNull) columnSQL += ' NOT NULL';
      if (columnDef.references) columnSQL += ` REFERENCES ${columnDef.references}`;
      if (columnDef.default) columnSQL += ` DEFAULT ${columnDef.default}`;
      
      return columnSQL;
    });
    
    sql += columns.join(',\n');
    sql += '\n);\n\n';
    
    // Añadir índices
    if (definition.indexes && definition.indexes.length > 0) {
      definition.indexes.forEach(indexColumn => {
        sql += `CREATE INDEX IF NOT EXISTS idx_${tableName}_${indexColumn} ON public.${tableName} (${indexColumn});\n`;
      });
    }
    
    return sql;
  }
  
  /**
   * Crea una nueva tabla en la base de datos
   * @param tableName Nombre de la tabla a crear
   * @param definition Definición de la tabla
   * @returns Promise con el resultado de la operación
   */
  public async createTable(tableName: string, definition: TableDefinition): Promise<SchemaChangeResult> {
    try {
      // Verificar si la tabla ya existe
      const exists = await this.tableExists(tableName);
      
      if (exists) {
        return {
          success: false,
          message: `La tabla '${tableName}' ya existe.`
        };
      }
      
      // Generar SQL
      const sql = this.generateCreateTableSQL(tableName, definition);
      
      // Si tenemos un cliente admin, ejecutar directamente
      if (this.adminClient) {
        const { error } = await this.adminClient.rpc('execute_sql', { sql });
        
        if (error) throw error;
        
        return {
          success: true,
          message: `Tabla '${tableName}' creada correctamente.`,
          sql
        };
      }
      
      // Si no hay cliente admin, devolver el SQL para ejecutar manualmente
      return {
        success: true,
        message: `SQL generado para crear la tabla '${tableName}'.`,
        sql,
        needsExecution: true
      };
    } catch (error) {
      return {
        success: false,
        message: `Error al crear la tabla '${tableName}': ${error instanceof Error ? error.message : String(error)}`
      };
    }
  }
  
  /**
   * Genera una migración completa con todos los cambios pendientes
   * @param name Nombre descriptivo de la migración
   * @returns Objeto con el SQL de la migración
   */
  public async generateFullMigration(name: string): Promise<MigrationResult> {
    // Esta función requeriría acceso a los módulos MDC completos
    // Versión simplificada para ilustrar la estructura
    const timestamp = new Date().toISOString().replace(/[-:T.]/g, '').slice(0, 14);
    const migrationName = `${timestamp}_${name.toLowerCase().replace(/[^a-z0-9]/g, '_')}`;
    
    return {
      name: migrationName,
      sql: `-- Migration: ${name}\n-- Created at: ${new Date().toISOString()}\n\n-- Implementación pendiente\n`,
      timestamp
    };
  }
  
  /**
   * Actualiza los tipos de TypeScript para la base de datos
   * @returns Promise con el resultado de la operación
   */
  public async updateDatabaseTypes(): Promise<SchemaChangeResult> {
    // Esta función requeriría acceso a los módulos MDC completos
    return {
      success: false,
      message: 'La función requiere implementación completa con acceso a los módulos MDC.'
    };
  }
}

// Exportar una instancia por defecto
export const dbManager = DatabaseManager.getInstance();

// Funciones de conveniencia
export const createTable = dbManager.createTable.bind(dbManager);
export const tableExists = dbManager.tableExists.bind(dbManager);
export const generateFullMigration = dbManager.generateFullMigration.bind(dbManager);
export const updateDatabaseTypes = dbManager.updateDatabaseTypes.bind(dbManager); 