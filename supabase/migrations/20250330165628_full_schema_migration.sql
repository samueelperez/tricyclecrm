-- Script de creación/actualización de la base de datos para TricycleCRM
-- Generado automáticamente: 2025-03-30T16:56:28.324Z
-- Versión adaptada para compatibilidad con API REST

-- Primero creamos todas las tablas principales sin restricciones de clave foránea
-- Luego agregaremos las restricciones de forma separada

-- 1. Tabla clientes (sin dependencias)
CREATE TABLE IF NOT EXISTS public.clientes (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  nombre text NOT NULL,
  id_fiscal text,
  direccion text,
  ciudad text,
  codigo_postal text,
  pais text,
  contacto_nombre text,
  email text,
  telefono text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_clientes_nombre ON public.clientes (nombre);
CREATE INDEX IF NOT EXISTS idx_clientes_id_fiscal ON public.clientes (id_fiscal);

-- 2. Tabla proveedores (sin dependencias)
CREATE TABLE IF NOT EXISTS public.proveedores (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  nombre text NOT NULL,
  id_fiscal text,
  contacto_nombre text,
  email text,
  telefono text,
  direccion text,
  ciudad text,
  codigo_postal text,
  pais text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_proveedores_nombre ON public.proveedores (nombre);
CREATE INDEX IF NOT EXISTS idx_proveedores_id_fiscal ON public.proveedores (id_fiscal);

-- 3. Tabla materiales (sin dependencias)
CREATE TABLE IF NOT EXISTS public.materiales (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  nombre text NOT NULL,
  descripcion text,
  precio_unitario numeric,
  unidad_medida text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_materiales_nombre ON public.materiales (nombre);

-- 4. Tabla negocios (con dependencia de clientes)
CREATE TABLE IF NOT EXISTS public.negocios (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  nombre text NOT NULL,
  cliente_id integer,
  fecha_inicio date,
  fecha_cierre date,
  estado text,
  valor_total numeric,
  margen_estimado numeric,
  descripcion text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_negocios_cliente_id ON public.negocios (cliente_id);
CREATE INDEX IF NOT EXISTS idx_negocios_estado ON public.negocios (estado);

-- 5. Tabla facturas_cliente (con dependencia de clientes y negocios)
CREATE TABLE IF NOT EXISTS public.facturas_cliente (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  id_externo text NOT NULL,
  fecha date NOT NULL,
  monto numeric NOT NULL,
  estado text,
  material text,
  cliente_id integer,
  negocio_id integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_facturas_cliente_id_externo ON public.facturas_cliente (id_externo);
CREATE INDEX IF NOT EXISTS idx_facturas_cliente_negocio_id ON public.facturas_cliente (negocio_id);
CREATE INDEX IF NOT EXISTS idx_facturas_cliente_cliente_id ON public.facturas_cliente (cliente_id);

-- 6. Tabla facturas_proveedor (con dependencia de proveedores y negocios)
CREATE TABLE IF NOT EXISTS public.facturas_proveedor (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  id_externo text NOT NULL,
  fecha date NOT NULL,
  monto numeric NOT NULL,
  proveedor_nombre text NOT NULL,
  proveedor_id integer,
  estado text,
  material text,
  negocio_id integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_facturas_proveedor_id_externo ON public.facturas_proveedor (id_externo);
CREATE INDEX IF NOT EXISTS idx_facturas_proveedor_proveedor_id ON public.facturas_proveedor (proveedor_id);
CREATE INDEX IF NOT EXISTS idx_facturas_proveedor_negocio_id ON public.facturas_proveedor (negocio_id);

-- 7. Tabla albaranes (con dependencia de negocios)
CREATE TABLE IF NOT EXISTS public.albaranes (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  id_externo text NOT NULL,
  fecha date NOT NULL,
  monto numeric NOT NULL,
  transportista text NOT NULL,
  tracking_number text,
  estado text,
  negocio_id integer,
  origen text,
  destino text,
  instrucciones text,
  metodo_envio text,
  material text,
  peso_total numeric,
  tipo_contenedor text,
  valor_declarado numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_albaranes_id_externo ON public.albaranes (id_externo);
CREATE INDEX IF NOT EXISTS idx_albaranes_negocio_id ON public.albaranes (negocio_id);

-- 8. Tabla negocios_materiales (con dependencia de negocios y materiales)
CREATE TABLE IF NOT EXISTS public.negocios_materiales (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  negocio_id integer NOT NULL,
  material_id integer NOT NULL,
  cantidad numeric NOT NULL,
  precio_unitario numeric NOT NULL,
  subtotal numeric NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_negocios_materiales_negocio_id ON public.negocios_materiales (negocio_id);
CREATE INDEX IF NOT EXISTS idx_negocios_materiales_material_id ON public.negocios_materiales (material_id);

-- 9. Tabla negocios_proveedores (con dependencia de negocios y proveedores)
CREATE TABLE IF NOT EXISTS public.negocios_proveedores (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  negocio_id integer NOT NULL,
  proveedor_id integer NOT NULL,
  monto_estimado numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_negocios_proveedores_negocio_id ON public.negocios_proveedores (negocio_id);
CREATE INDEX IF NOT EXISTS idx_negocios_proveedores_proveedor_id ON public.negocios_proveedores (proveedor_id);

-- 10. Tabla perfiles (con dependencia de auth.users)
CREATE TABLE IF NOT EXISTS public.perfiles (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  user_id uuid NOT NULL,
  nombre text NOT NULL,
  apellidos text,
  rol text NOT NULL,
  email text NOT NULL,
  telefono text,
  avatar_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_perfiles_user_id ON public.perfiles (user_id);
CREATE INDEX IF NOT EXISTS idx_perfiles_email ON public.perfiles (email);

-- 11. Tabla proformas (con dependencia de clientes, proveedores y negocios)
CREATE TABLE IF NOT EXISTS public.proformas (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  numero text NOT NULL,
  tipo text NOT NULL DEFAULT 'customer',
  cliente_id integer,
  proveedor_id integer,
  negocio_id integer,
  fecha date NOT NULL,
  valida_hasta date,
  estado text,
  monto_total numeric NOT NULL,
  condiciones_pago text,
  notas text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_proformas_numero ON public.proformas (numero);
CREATE INDEX IF NOT EXISTS idx_proformas_cliente_id ON public.proformas (cliente_id);
CREATE INDEX IF NOT EXISTS idx_proformas_proveedor_id ON public.proformas (proveedor_id);
CREATE INDEX IF NOT EXISTS idx_proformas_negocio_id ON public.proformas (negocio_id);
CREATE INDEX IF NOT EXISTS idx_proformas_tipo ON public.proformas (tipo);

-- 12. Tabla proformas_productos (con dependencia de proformas y materiales)
CREATE TABLE IF NOT EXISTS public.proformas_productos (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  proforma_id integer NOT NULL,
  descripcion text NOT NULL,
  cantidad numeric NOT NULL,
  precio_unitario numeric NOT NULL,
  subtotal numeric NOT NULL,
  material_id integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_proformas_productos_proforma_id ON public.proformas_productos (proforma_id);
CREATE INDEX IF NOT EXISTS idx_proformas_productos_material_id ON public.proformas_productos (material_id);

-- 13. Tabla recibos (con dependencia de facturas)
CREATE TABLE IF NOT EXISTS public.recibos (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  numero text NOT NULL,
  fecha date NOT NULL,
  monto numeric NOT NULL,
  metodo_pago text,
  estado text,
  factura_cliente_id integer,
  factura_proveedor_id integer,
  descripcion text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

CREATE INDEX IF NOT EXISTS idx_recibos_numero ON public.recibos (numero);
CREATE INDEX IF NOT EXISTS idx_recibos_factura_cliente_id ON public.recibos (factura_cliente_id);
CREATE INDEX IF NOT EXISTS idx_recibos_factura_proveedor_id ON public.recibos (factura_proveedor_id);

-- Añadir restricciones de clave foránea (después de que todas las tablas existan)

-- FK para negocios
ALTER TABLE IF EXISTS public.negocios
ADD CONSTRAINT IF NOT EXISTS fk_negocios_cliente
FOREIGN KEY (cliente_id) REFERENCES public.clientes(id) 
ON DELETE SET NULL;

-- FK para facturas_cliente
ALTER TABLE IF EXISTS public.facturas_cliente
ADD CONSTRAINT IF NOT EXISTS fk_facturas_cliente_cliente
FOREIGN KEY (cliente_id) REFERENCES public.clientes(id) 
ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.facturas_cliente
ADD CONSTRAINT IF NOT EXISTS fk_facturas_cliente_negocio
FOREIGN KEY (negocio_id) REFERENCES public.negocios(id) 
ON DELETE SET NULL;

-- FK para facturas_proveedor
ALTER TABLE IF EXISTS public.facturas_proveedor
ADD CONSTRAINT IF NOT EXISTS fk_facturas_proveedor_proveedor
FOREIGN KEY (proveedor_id) REFERENCES public.proveedores(id) 
ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.facturas_proveedor
ADD CONSTRAINT IF NOT EXISTS fk_facturas_proveedor_negocio
FOREIGN KEY (negocio_id) REFERENCES public.negocios(id) 
ON DELETE SET NULL;

-- FK para albaranes
ALTER TABLE IF EXISTS public.albaranes
ADD CONSTRAINT IF NOT EXISTS fk_albaranes_negocio
FOREIGN KEY (negocio_id) REFERENCES public.negocios(id) 
ON DELETE SET NULL;

-- FK para negocios_materiales
ALTER TABLE IF EXISTS public.negocios_materiales
ADD CONSTRAINT IF NOT EXISTS fk_negocios_materiales_negocio
FOREIGN KEY (negocio_id) REFERENCES public.negocios(id) 
ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.negocios_materiales
ADD CONSTRAINT IF NOT EXISTS fk_negocios_materiales_material
FOREIGN KEY (material_id) REFERENCES public.materiales(id) 
ON DELETE CASCADE;

-- FK para negocios_proveedores
ALTER TABLE IF EXISTS public.negocios_proveedores
ADD CONSTRAINT IF NOT EXISTS fk_negocios_proveedores_negocio
FOREIGN KEY (negocio_id) REFERENCES public.negocios(id) 
ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.negocios_proveedores
ADD CONSTRAINT IF NOT EXISTS fk_negocios_proveedores_proveedor
FOREIGN KEY (proveedor_id) REFERENCES public.proveedores(id) 
ON DELETE CASCADE;

-- FK para proformas
ALTER TABLE IF EXISTS public.proformas
ADD CONSTRAINT IF NOT EXISTS fk_proformas_cliente
FOREIGN KEY (cliente_id) REFERENCES public.clientes(id) 
ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.proformas
ADD CONSTRAINT IF NOT EXISTS fk_proformas_proveedor
FOREIGN KEY (proveedor_id) REFERENCES public.proveedores(id) 
ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.proformas
ADD CONSTRAINT IF NOT EXISTS fk_proformas_negocio
FOREIGN KEY (negocio_id) REFERENCES public.negocios(id) 
ON DELETE SET NULL;

-- FK para proformas_productos
ALTER TABLE IF EXISTS public.proformas_productos
ADD CONSTRAINT IF NOT EXISTS fk_proformas_productos_proforma
FOREIGN KEY (proforma_id) REFERENCES public.proformas(id) 
ON DELETE CASCADE;

ALTER TABLE IF EXISTS public.proformas_productos
ADD CONSTRAINT IF NOT EXISTS fk_proformas_productos_material
FOREIGN KEY (material_id) REFERENCES public.materiales(id) 
ON DELETE SET NULL;

-- FK para recibos
ALTER TABLE IF EXISTS public.recibos
ADD CONSTRAINT IF NOT EXISTS fk_recibos_factura_cliente
FOREIGN KEY (factura_cliente_id) REFERENCES public.facturas_cliente(id) 
ON DELETE SET NULL;

ALTER TABLE IF EXISTS public.recibos
ADD CONSTRAINT IF NOT EXISTS fk_recibos_factura_proveedor
FOREIGN KEY (factura_proveedor_id) REFERENCES public.facturas_proveedor(id) 
ON DELETE SET NULL;

-- Función para actualizar automáticamente la columna updated_at
CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para actualizar automáticamente updated_at en todas las tablas
CREATE TRIGGER update_clientes_timestamp
BEFORE UPDATE ON public.clientes
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_proveedores_timestamp
BEFORE UPDATE ON public.proveedores
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_materiales_timestamp
BEFORE UPDATE ON public.materiales
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_negocios_timestamp
BEFORE UPDATE ON public.negocios
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_facturas_cliente_timestamp
BEFORE UPDATE ON public.facturas_cliente
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_facturas_proveedor_timestamp
BEFORE UPDATE ON public.facturas_proveedor
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_albaranes_timestamp
BEFORE UPDATE ON public.albaranes
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_negocios_materiales_timestamp
BEFORE UPDATE ON public.negocios_materiales
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_negocios_proveedores_timestamp
BEFORE UPDATE ON public.negocios_proveedores
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_perfiles_timestamp
BEFORE UPDATE ON public.perfiles
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_proformas_timestamp
BEFORE UPDATE ON public.proformas
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_proformas_productos_timestamp
BEFORE UPDATE ON public.proformas_productos
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

CREATE TRIGGER update_recibos_timestamp
BEFORE UPDATE ON public.recibos
FOR EACH ROW EXECUTE FUNCTION update_timestamp();

-- Registrar esta migración
INSERT INTO public.migrations (name) 
VALUES ('20250330165628_full_schema_migration') 
ON CONFLICT (name) DO NOTHING;

